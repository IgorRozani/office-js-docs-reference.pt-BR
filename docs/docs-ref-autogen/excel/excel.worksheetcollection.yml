### YamlMime:UniversalReference
ms.openlocfilehash: 167dd37c43a46d285d55bc4c9bdf14108b4c28bb
ms.sourcegitcommit: beffe9455dace422e85b92f0105c54ff7b594cbf
ms.translationtype: MT
ms.contentlocale: pt-BR
ms.lasthandoff: 09/20/2018
ms.locfileid: "24040018"
items:
- uid: excel.Excel.WorksheetCollection
  summary: >-
    <span data-ttu-id="1af75-101">Representa uma coleção de todos os objetos worksheet que fazem parte da pasta de trabalho.</span><span class="sxs-lookup"><span data-stu-id="1af75-101">Represents a collection of worksheet objects that are part of the workbook.</span></span>


    <span data-ttu-id="1af75-102">\[[Conjunto de APIs: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1af75-102">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.WorksheetCollection
  fullName: excel.Excel.WorksheetCollection
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.WorksheetCollection.add
  - excel.Excel.WorksheetCollection.getActiveWorksheet
  - excel.Excel.WorksheetCollection.getCount
  - excel.Excel.WorksheetCollection.getFirst
  - excel.Excel.WorksheetCollection.getItem
  - excel.Excel.WorksheetCollection.getItemOrNullObject
  - excel.Excel.WorksheetCollection.getLast
  - excel.Excel.WorksheetCollection.items
  - excel.Excel.WorksheetCollection.load
  - excel.Excel.WorksheetCollection.onActivated
  - excel.Excel.WorksheetCollection.onAdded
  - excel.Excel.WorksheetCollection.onDeactivated
  - excel.Excel.WorksheetCollection.onDeleted
  - excel.Excel.WorksheetCollection.toJSON
- uid: excel.Excel.WorksheetCollection.add
  summary: >-
    <span data-ttu-id="1af75-p101">Adiciona uma nova planilha à pasta de trabalho. A planilha será adicionada ao final das planilhas existentes. Se você quiser ativar a planilha recém-adicionada, chame “.activate()” nela.</span><span class="sxs-lookup"><span data-stu-id="1af75-p101">Adds a new worksheet to the workbook. The worksheet will be added at the end of existing worksheets. If you wish to activate the newly added worksheet, call ".activate() on it.</span></span>


    <span data-ttu-id="1af75-106">\[[Conjunto de APIs: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1af75-106">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: add(name)
  fullName: excel.Excel.WorksheetCollection.add
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(name?: string): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"1af75-107\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"1af75-107\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sample Name';\n    var worksheet = ctx.workbook.worksheets.add(wSheetName);\n    worksheet.load('name');\n    return ctx.sync().then(function() {\n        console.log(worksheet.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: name
      description: <span data-ttu-id="1af75-p102">Opcional. O nome da planilha a ser adicionada. Se especificado, o nome deve ser exclusivo. Se não especificado, o Excel determina o nome da nova planilha.</span><span class="sxs-lookup"><span data-stu-id="1af75-p102">Optional. The name of the worksheet to be added. If specified, name should be unqiue. If not specified, Excel determines the name of the new worksheet.</span></span>
      type:
      - string
- uid: excel.Excel.WorksheetCollection.getActiveWorksheet
  summary: >-
    <span data-ttu-id="1af75-112">Obtém a planilha ativa no momento na pasta de trabalho.</span><span class="sxs-lookup"><span data-stu-id="1af75-112">Gets the currently active worksheet in the workbook.</span></span>


    <span data-ttu-id="1af75-113">\[[Conjunto de APIs: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1af75-113">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getActiveWorksheet()
  fullName: excel.Excel.WorksheetCollection.getActiveWorksheet
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getActiveWorksheet(): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"1af75-114\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"1af75-114\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) {  \n    var activeWorksheet = ctx.workbook.worksheets.getActiveWorksheet();\n    activeWorksheet.load('name');\n    return ctx.sync().then(function() {\n            console.log(activeWorksheet.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.WorksheetCollection.getCount
  summary: >-
    <span data-ttu-id="1af75-115">Obtém o número de planilhas na coleção.</span><span class="sxs-lookup"><span data-stu-id="1af75-115">Gets the number of worksheets in the collection.</span></span>


    <span data-ttu-id="1af75-116">\[[Conjunto de APIs: ExcelApi 1,4](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1af75-116">\[ [API set: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getCount(visibleOnly)
  fullName: excel.Excel.WorksheetCollection.getCount
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(visibleOnly?: boolean): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: ''
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="1af75-p103">Opcional. Caso verdadeiro, considera apenas planilhas visíveis, ignorando as ocultas.</span><span class="sxs-lookup"><span data-stu-id="1af75-p103">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.WorksheetCollection.getFirst
  summary: >-
    <span data-ttu-id="1af75-119">Obtém a primeira planilha na coleção.</span><span class="sxs-lookup"><span data-stu-id="1af75-119">Gets the first worksheet in the collection.</span></span>


    <span data-ttu-id="1af75-120">\[[Conjunto de APIs: ExcelApi 1,5](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1af75-120">\[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getFirst(visibleOnly)
  fullName: excel.Excel.WorksheetCollection.getFirst
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFirst(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"1af75-121\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"1af75-121\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    const firstSheet = sheets.getFirst().getNext();\n    const lastSheet = sheets.getLast();\n    const firstTaxRateRange = firstSheet.getRange(\"B2\");\n    const lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    OfficeHelpers.UI.notify(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="1af75-p104">Opcional. Caso verdadeiro, considera apenas planilhas visíveis, ignorando as ocultas.</span><span class="sxs-lookup"><span data-stu-id="1af75-p104">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.WorksheetCollection.getItem
  summary: >-
    <span data-ttu-id="1af75-124">Obtém um objeto de planilha usando o Nome ou ID dele.</span><span class="sxs-lookup"><span data-stu-id="1af75-124">Gets a worksheet object using its Name or ID.</span></span>


    <span data-ttu-id="1af75-125">\[[Conjunto de APIs: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1af75-125">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItem(key)
  fullName: excel.Excel.WorksheetCollection.getItem
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(key: string): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: key
      description: <span data-ttu-id="1af75-126">O Nome ou ID da planilha.</span><span class="sxs-lookup"><span data-stu-id="1af75-126">The Name or ID of the worksheet.</span></span>
      type:
      - string
- uid: excel.Excel.WorksheetCollection.getItemOrNullObject
  summary: >-
    <span data-ttu-id="1af75-p105">Obtém um objeto worksheet usando o Nome ou ID dele. Se a planilha não existir, retornará um objeto null.</span><span class="sxs-lookup"><span data-stu-id="1af75-p105">Gets a worksheet object using its Name or ID. If the worksheet does not exist, will return a null object.</span></span>


    <span data-ttu-id="1af75-129">\[[Conjunto de APIs: ExcelApi 1,4](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1af75-129">\[ [API set: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItemOrNullObject(key)
  fullName: excel.Excel.WorksheetCollection.getItemOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemOrNullObject(key: string): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: key
      description: <span data-ttu-id="1af75-130">O Nome ou ID da planilha.</span><span class="sxs-lookup"><span data-stu-id="1af75-130">The Name or ID of the worksheet.</span></span>
      type:
      - string
- uid: excel.Excel.WorksheetCollection.getLast
  summary: >-
    <span data-ttu-id="1af75-131">Obtém a última planilha na coleção.</span><span class="sxs-lookup"><span data-stu-id="1af75-131">Gets the last worksheet in the collection.</span></span>


    <span data-ttu-id="1af75-132">\[[Conjunto de APIs: ExcelApi 1,5](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1af75-132">\[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getLast(visibleOnly)
  fullName: excel.Excel.WorksheetCollection.getLast
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getLast(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"1af75-133\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"1af75-133\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    const firstSheet = sheets.getFirst().getNext();\n    const lastSheet = sheets.getLast();\n    const firstTaxRateRange = firstSheet.getRange(\"B2\");\n    const lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    OfficeHelpers.UI.notify(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="1af75-p106">Opcional. Caso verdadeiro, considera apenas planilhas visíveis, ignorando as ocultas.</span><span class="sxs-lookup"><span data-stu-id="1af75-p106">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.WorksheetCollection.items
  summary: <span data-ttu-id="1af75-136">Obtém o filho carregado itens nesta coleção.</span><span class="sxs-lookup"><span data-stu-id="1af75-136">Gets the loaded child items in this collection.</span></span>
  name: items
  fullName: excel.Excel.WorksheetCollection.items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.Worksheet[];'
    return:
      type:
      - Excel.Worksheet[]
- uid: excel.Excel.WorksheetCollection.load
  summary: <span data-ttu-id="1af75-137">Filas de backup de um comando para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="1af75-137">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="1af75-138">Você deve chamar "context.sync()" antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="1af75-138">You must call "context.sync()" before reading the properties.</span></span>
  remarks: "<span data-ttu-id=\"1af75-139\">Além dessa assinatura, esse método tem as seguintes assinaturas:</span><span class=\"sxs-lookup\"><span data-stu-id=\"1af75-139\">In addition to this signature, this method has the following signatures:</span></span>\n\n<span data-ttu-id=\"1af75-140\">`load(option?: { select?: string; expand?: string; }): Excel.WorksheetCollection`-Onde option.select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades para carregar e options.expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação para carregar.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1af75-140\">`load(option?: { select?: string; expand?: string; }): Excel.WorksheetCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>\n\n<span data-ttu-id=\"1af75-141\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.WorksheetCollection`-Só está disponível em tipos de coleção.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1af75-141\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.WorksheetCollection` - Only available on collection types.</span></span> <span data-ttu-id=\"1af75-142\">Ele é semelhante à assinatura anterior.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1af75-142\">It is similar to the preceding signature.</span></span> <span data-ttu-id=\"1af75-143\">Option.Top Especifica o número máximo de itens que podem ser incluídos no resultado da coleção.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1af75-143\">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id=\"1af75-144\">Option.Skip Especifica o número de itens que devem ser ignorados e não são incluídos no resultado.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1af75-144\">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id=\"1af75-145\">Se option.top for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1af75-145\">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>\n#### <a name=\"examples\"></a><span data-ttu-id=\"1af75-146\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"1af75-146\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var worksheets = ctx.workbook.worksheets;\n    worksheets.load('items');\n    return ctx.sync().then(function() {\n        for (var i = 0; i < worksheets.items.length; i++)\n        {\n            console.log(worksheets.items[i].name);\n            console.log(worksheets.items[i].index);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
  name: load(option)
  fullName: excel.Excel.WorksheetCollection.load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.WorksheetCollection;'
    return:
      type:
      - excel.Excel.WorksheetCollection
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="1af75-147">Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades de carga.</span><span class="sxs-lookup"><span data-stu-id="1af75-147">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.WorksheetCollection.onActivated
  summary: >-
    <span data-ttu-id="1af75-148">Ocorre quando uma planilha na pasta de trabalho é ativada.</span><span class="sxs-lookup"><span data-stu-id="1af75-148">Occurs when any worksheet in the workbook is activated.</span></span>


    <span data-ttu-id="1af75-149">\[[Conjunto de APIs: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1af75-149">\[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onActivated
  fullName: excel.Excel.WorksheetCollection.onActivated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"1af75-150\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"1af75-150\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let sheets = context.workbook.worksheets;\n    sheets.onActivated.add(onActivate);\n\n    await context.sync();\n\n    OfficeHelpers.UI.notify(\"A handler has been registered for the OnActivate event\",\n        \"Try selecting a different worksheet, and watch the console output.\");   \n});\n```"
- uid: excel.Excel.WorksheetCollection.onAdded
  summary: >-
    <span data-ttu-id="1af75-151">Ocorre quando uma nova planilha é adicionada à pasta de trabalho.</span><span class="sxs-lookup"><span data-stu-id="1af75-151">Occurs when a new worksheet is added to the workbook.</span></span>


    <span data-ttu-id="1af75-152">\[[Conjunto de APIs: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1af75-152">\[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onAdded
  fullName: excel.Excel.WorksheetCollection.onAdded
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onAdded: OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"1af75-153\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"1af75-153\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets;\n    sheet.onAdded.add(onWorksheetAdd);\n\n    await context.sync();\n\n    OfficeHelpers.UI.notify(\"A handler has been registered for the OnAdded event\",\n        \"Try adding a worksheet, and watch the console output.\");\n});\n```"
- uid: excel.Excel.WorksheetCollection.onDeactivated
  summary: >-
    <span data-ttu-id="1af75-154">Ocorre quando uma planilha na pasta de trabalho é desativada.</span><span class="sxs-lookup"><span data-stu-id="1af75-154">Occurs when any worksheet in the workbook is deactivated.</span></span>


    <span data-ttu-id="1af75-155">\[[Conjunto de APIs: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1af75-155">\[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onDeactivated
  fullName: excel.Excel.WorksheetCollection.onDeactivated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"1af75-156\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"1af75-156\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let sheets = context.workbook.worksheets;\n    sheets.onDeactivated.add(onDeactivate);\n\n    await context.sync();\n\n    OfficeHelpers.UI.notify(\"A handler has been registered for the OnDeactivate event\",\n        \"Try selecting a different worksheet, and watch the console output.\");   \n});\n```"
- uid: excel.Excel.WorksheetCollection.onDeleted
  summary: >-
    <span data-ttu-id="1af75-157">Ocorre quando uma planilha é excluída da pasta de trabalho.</span><span class="sxs-lookup"><span data-stu-id="1af75-157">Occurs when a worksheet is deleted from the workbook.</span></span>


    <span data-ttu-id="1af75-158">\[[Conjunto de APIs: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1af75-158">\[ [API set: ExcelApi 1.7](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onDeleted
  fullName: excel.Excel.WorksheetCollection.onDeleted
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onDeleted: OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>
- uid: excel.Excel.WorksheetCollection.toJSON
  name: toJSON()
  fullName: excel.Excel.WorksheetCollection.toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.WorksheetCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.WorksheetCollectionData
      description: ''
