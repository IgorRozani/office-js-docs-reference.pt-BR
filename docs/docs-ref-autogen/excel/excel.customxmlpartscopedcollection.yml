### YamlMime:UniversalReference
ms.openlocfilehash: 36e0f5f14e91f416d242e7036da3e46e3a6ac692
ms.sourcegitcommit: beffe9455dace422e85b92f0105c54ff7b594cbf
ms.translationtype: MT
ms.contentlocale: pt-BR
ms.lasthandoff: 09/20/2018
ms.locfileid: "24037741"
items:
- uid: excel.Excel.CustomXmlPartScopedCollection
  summary: >-
    <span data-ttu-id="0c0d5-101">Uma coleção com escopo de partes XML personalizadas.</span><span class="sxs-lookup"><span data-stu-id="0c0d5-101">A scoped collection of custom XML parts.</span></span> <span data-ttu-id="0c0d5-102">Uma coleção de escopo é o resultado de alguma operação, por exemplo, a filtragem por namespace.</span><span class="sxs-lookup"><span data-stu-id="0c0d5-102">A scoped collection is the result of some operation, e.g. filtering by namespace.</span></span> <span data-ttu-id="0c0d5-103">Uma coleção de escopo não pode ser qualquer outra escopo.</span><span class="sxs-lookup"><span data-stu-id="0c0d5-103">A scoped collection cannot be scoped any further.</span></span>


    <span data-ttu-id="0c0d5-104">\[[Conjunto de APIs: ExcelApi 1,5](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0c0d5-104">\[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.CustomXmlPartScopedCollection
  fullName: excel.Excel.CustomXmlPartScopedCollection
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.CustomXmlPartScopedCollection.getCount
  - excel.Excel.CustomXmlPartScopedCollection.getItem
  - excel.Excel.CustomXmlPartScopedCollection.getItemOrNullObject
  - excel.Excel.CustomXmlPartScopedCollection.getOnlyItem
  - excel.Excel.CustomXmlPartScopedCollection.getOnlyItemOrNullObject
  - excel.Excel.CustomXmlPartScopedCollection.items
  - excel.Excel.CustomXmlPartScopedCollection.load
  - excel.Excel.CustomXmlPartScopedCollection.toJSON
- uid: excel.Excel.CustomXmlPartScopedCollection.getCount
  summary: >-
    <span data-ttu-id="0c0d5-105">Obtém o número de partes CustomXML nesta coleção.</span><span class="sxs-lookup"><span data-stu-id="0c0d5-105">Gets the number of CustomXML parts in this collection.</span></span>


    <span data-ttu-id="0c0d5-106">\[[Conjunto de APIs: ExcelApi 1,5](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0c0d5-106">\[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getCount()
  fullName: excel.Excel.CustomXmlPartScopedCollection.getCount
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0c0d5-107\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"0c0d5-107\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    $(\"#display-xml\").text(\"\");\n    const contosoNamespace = \"http://schemas.contoso.com/review/1.0\";\n    const customXmlParts = context.workbook.customXmlParts;\n    const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);\n    const numberOfPartsInNamespace = filteredXmlParts.getCount();\n\n    await context.sync();\n\n    if (numberOfPartsInNamespace.value == 1) {\n        const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();\n        const xmlBlob = onlyXmlPartInNamespace.getXml();\n\n        await context.sync();\n\n        // Make it a bit more readable.\n        const readableXml = xmlBlob.value.replace(/></g, \">\\n<\");\n\n        $(\"#display-xml\").text(`The only XML part in the namespace ${contosoNamespace} is:\n            ${readableXml}`);\n\n    } else {\n        OfficeHelpers.UI.notify(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}.\n            There should be exactly 1.`);\n    }        \n\n    await context.sync();\n});\n```"
- uid: excel.Excel.CustomXmlPartScopedCollection.getItem
  summary: >-
    <span data-ttu-id="0c0d5-108">Obtém uma parte XML personalizada com base em sua ID.</span><span class="sxs-lookup"><span data-stu-id="0c0d5-108">Gets a custom XML part based on its ID.</span></span>


    <span data-ttu-id="0c0d5-109">\[[Conjunto de APIs: ExcelApi 1,5](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0c0d5-109">\[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItem(id)
  fullName: excel.Excel.CustomXmlPartScopedCollection.getItem
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(id: string): Excel.CustomXmlPart;'
    return:
      type:
      - excel.Excel.CustomXmlPart
      description: ''
    parameters:
    - id: id
      description: <span data-ttu-id="0c0d5-110">ID do objeto a ser recuperado.</span><span class="sxs-lookup"><span data-stu-id="0c0d5-110">ID of the object to be retrieved.</span></span>
      type:
      - string
- uid: excel.Excel.CustomXmlPartScopedCollection.getItemOrNullObject
  summary: >-
    <span data-ttu-id="0c0d5-111">Obtém uma parte XML personalizada com base em sua ID.</span><span class="sxs-lookup"><span data-stu-id="0c0d5-111">Gets a custom XML part based on its ID.</span></span> <span data-ttu-id="0c0d5-112">Se o CustomXmlPart não existir, a propriedade isNull de retorno do objeto será true.</span><span class="sxs-lookup"><span data-stu-id="0c0d5-112">If the CustomXmlPart does not exist, the return object's isNull property will be true.</span></span>


    <span data-ttu-id="0c0d5-113">\[[Conjunto de APIs: ExcelApi 1,5](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0c0d5-113">\[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItemOrNullObject(id)
  fullName: excel.Excel.CustomXmlPartScopedCollection.getItemOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemOrNullObject(id: string): Excel.CustomXmlPart;'
    return:
      type:
      - excel.Excel.CustomXmlPart
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0c0d5-114\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"0c0d5-114\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const settings = context.workbook.settings;\n    const xmlPartIDSetting = settings.getItem(\"ContosoReviewXmlPartId\").load(\"value\");\n\n    await context.sync();\n    \n    let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);\n    const xmlBlob = customXmlPart.getXml();\n    customXmlPart.delete();\n    customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);\n\n    await context.sync();\n\n    if (customXmlPart.isNullObject) {\n        $(\"#display-xml\").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);\n\n        // Delete the unneeded setting too.\n        xmlPartIDSetting.delete();            \n    } else {\n        const readableXml = addLineBreaksToXML(xmlBlob.value);\n        const strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\\n${readableXml}`\n        $(\"#display-xml\").text(strangeMessage);\n    }\n\n    await context.sync();\n});\n```"
    parameters:
    - id: id
      description: <span data-ttu-id="0c0d5-115">ID do objeto a ser recuperado.</span><span class="sxs-lookup"><span data-stu-id="0c0d5-115">ID of the object to be retrieved.</span></span>
      type:
      - string
- uid: excel.Excel.CustomXmlPartScopedCollection.getOnlyItem
  summary: >-
    <span data-ttu-id="0c0d5-116">Se o conjunto contiver exatamente um item, esse método o retornará.</span><span class="sxs-lookup"><span data-stu-id="0c0d5-116">If the collection contains exactly one item, this method returns it.</span></span> <span data-ttu-id="0c0d5-117">Caso contrário, este método produzirá um erro.</span><span class="sxs-lookup"><span data-stu-id="0c0d5-117">Otherwise, this method produces an error.</span></span>


    <span data-ttu-id="0c0d5-118">\[[Conjunto de APIs: ExcelApi 1,5](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0c0d5-118">\[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getOnlyItem()
  fullName: excel.Excel.CustomXmlPartScopedCollection.getOnlyItem
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getOnlyItem(): Excel.CustomXmlPart;'
    return:
      type:
      - excel.Excel.CustomXmlPart
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0c0d5-119\">Exemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"0c0d5-119\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    $(\"#display-xml\").text(\"\");\n    const contosoNamespace = \"http://schemas.contoso.com/review/1.0\";\n    const customXmlParts = context.workbook.customXmlParts;\n    const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);\n    const numberOfPartsInNamespace = filteredXmlParts.getCount();\n\n    await context.sync();\n\n    if (numberOfPartsInNamespace.value == 1) {\n        const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();\n        const xmlBlob = onlyXmlPartInNamespace.getXml();\n\n        await context.sync();\n\n        // Make it a bit more readable.\n        const readableXml = xmlBlob.value.replace(/></g, \">\\n<\");\n\n        $(\"#display-xml\").text(`The only XML part in the namespace ${contosoNamespace} is:\n            ${readableXml}`);\n\n    } else {\n        OfficeHelpers.UI.notify(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}.\n            There should be exactly 1.`);\n    }        \n\n    await context.sync();\n});\n```"
- uid: excel.Excel.CustomXmlPartScopedCollection.getOnlyItemOrNullObject
  summary: >-
    <span data-ttu-id="0c0d5-120">Se o conjunto contiver exatamente um item, esse método o retornará.</span><span class="sxs-lookup"><span data-stu-id="0c0d5-120">If the collection contains exactly one item, this method returns it.</span></span> <span data-ttu-id="0c0d5-121">Caso contrário, este método retornará Null.</span><span class="sxs-lookup"><span data-stu-id="0c0d5-121">Otherwise, this method returns Null.</span></span>


    <span data-ttu-id="0c0d5-122">\[[Conjunto de APIs: ExcelApi 1,5](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0c0d5-122">\[ [API set: ExcelApi 1.5](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getOnlyItemOrNullObject()
  fullName: excel.Excel.CustomXmlPartScopedCollection.getOnlyItemOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getOnlyItemOrNullObject(): Excel.CustomXmlPart;'
    return:
      type:
      - excel.Excel.CustomXmlPart
      description: ''
- uid: excel.Excel.CustomXmlPartScopedCollection.items
  summary: <span data-ttu-id="0c0d5-123">Obtém o filho carregado itens nesta coleção.</span><span class="sxs-lookup"><span data-stu-id="0c0d5-123">Gets the loaded child items in this collection.</span></span>
  name: items
  fullName: excel.Excel.CustomXmlPartScopedCollection.items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.CustomXmlPart[];'
    return:
      type:
      - Excel.CustomXmlPart[]
- uid: excel.Excel.CustomXmlPartScopedCollection.load
  summary: <span data-ttu-id="0c0d5-124">Filas de backup de um comando para carregar as propriedades especificadas do objeto.</span><span class="sxs-lookup"><span data-stu-id="0c0d5-124">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="0c0d5-125">Você deve chamar "context.sync()" antes de ler as propriedades.</span><span class="sxs-lookup"><span data-stu-id="0c0d5-125">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="0c0d5-126">Além dessa assinatura, esse método tem as seguintes assinaturas:</span><span class="sxs-lookup"><span data-stu-id="0c0d5-126">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="0c0d5-127">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartScopedCollection`-Onde option.select é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades para carregar e options.expand é uma cadeia de caracteres delimitada por vírgula que especifica as propriedades de navegação para carregar.</span><span class="sxs-lookup"><span data-stu-id="0c0d5-127">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartScopedCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="0c0d5-128">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartScopedCollection`-Só está disponível em tipos de coleção.</span><span class="sxs-lookup"><span data-stu-id="0c0d5-128">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartScopedCollection` - Only available on collection types.</span></span> <span data-ttu-id="0c0d5-129">Ele é semelhante à assinatura anterior.</span><span class="sxs-lookup"><span data-stu-id="0c0d5-129">It is similar to the preceding signature.</span></span> <span data-ttu-id="0c0d5-130">Option.Top Especifica o número máximo de itens que podem ser incluídos no resultado da coleção.</span><span class="sxs-lookup"><span data-stu-id="0c0d5-130">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="0c0d5-131">Option.Skip Especifica o número de itens que devem ser ignorados e não são incluídos no resultado.</span><span class="sxs-lookup"><span data-stu-id="0c0d5-131">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="0c0d5-132">Se option.top for especificado, o conjunto de resultados será iniciado depois de ignorar o número de itens especificado.</span><span class="sxs-lookup"><span data-stu-id="0c0d5-132">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: excel.Excel.CustomXmlPartScopedCollection.load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.CustomXmlPartScopedCollection;'
    return:
      type:
      - excel.Excel.CustomXmlPartScopedCollection
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="0c0d5-133">Uma cadeia de caracteres delimitada por vírgula ou uma matriz de cadeias de caracteres que especificam as propriedades de carga.</span><span class="sxs-lookup"><span data-stu-id="0c0d5-133">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.CustomXmlPartScopedCollection.toJSON
  name: toJSON()
  fullName: excel.Excel.CustomXmlPartScopedCollection.toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.CustomXmlPartScopedCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.CustomXmlPartScopedCollectionData
      description: ''
